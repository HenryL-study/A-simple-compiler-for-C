COMMENT 			COMMENT
CONSTSY 			const
INTSY 			int
IDENT 			_const_1
ASSIGHSY 			=
PLUSSY 			+
UNSIGHEDINT 			101
SEMISY 			;
CONSTSY 			const
INTSY 			int
IDENT 			_const_2
ASSIGHSY 			=
MINUSSY 			-
UNSIGHEDINT 			101
COMMASY 			,
IDENT 			_const_3
ASSIGHSY 			=
SIGNEDINT 			0
COMMASY 			,
IDENT 			_const_4
ASSIGHSY 			=
UNSIGHEDINT 			5
SEMISY 			;
CONSTSY 			const
CHARSY 			char
IDENT 			_const_c_1
ASSIGHSY 			=
_CHAR 			+
COMMASY 			,
IDENT 			_const_c_2
ASSIGHSY 			=
_CHAR 			_
COMMASY 			,
IDENT 			_const_c_3
ASSIGHSY 			=
_CHAR 			a
SEMISY 			;
COMMENT 			COMMENT
INTSY 			int
IDENT 			_var_1
SEMISY 			;
INTSY 			int
IDENT 			_var_2
COMMASY 			,
IDENT 			_int_array
LBRAKET 			[
UNSIGHEDINT 			10
RBRAKET 			]
SEMISY 			;
CHARSY 			char
IDENT 			_var_4
COMMASY 			,
IDENT 			_char_array
LBRAKET 			[
UNSIGHEDINT 			10
RBRAKET 			]
SEMISY 			;
COMMENT 			COMMENT
INTSY 			int
IDENT 			_return_0
LPARSY 			(
RPARSY 			)
LBRACE 			{
RETURNSY 			return
SIGNEDINT 			0
SEMISY 			;
RBRACE 			}
COMMENT 			COMMENT
INTSY 			int
IDENT 			_return_ab
LPARSY 			(
INTSY 			int
IDENT 			a
COMMASY 			,
INTSY 			int
IDENT 			b
RPARSY 			)
LBRACE 			{
INTSY 			int
IDENT 			temp
SEMISY 			;
IFSY 			if
LPARSY 			(
IDENT 			a
EQUSY 			==
SIGNEDINT 			0
RPARSY 			)
RETURNSY 			return
IDENT 			b
SEMISY 			;
ELSESY 			else
LBRACE 			{
IDENT 			a
ASSIGHSY 			=
IDENT 			a
MINUSSY 			-
UNSIGHEDINT 			1
SEMISY 			;
IDENT 			temp
ASSIGHSY 			=
IDENT 			_return_ab
LPARSY 			(
IDENT 			a
COMMASY 			,
IDENT 			b
RPARSY 			)
SEMISY 			;
RBRACE 			}
RETURNSY 			return
IDENT 			b
PLUSSY 			+
IDENT 			temp
SEMISY 			;
RBRACE 			}
VOIDSY 			void
IDENT 			_print_na
LPARSY 			(
CHARSY 			char
IDENT 			a
COMMASY 			,
INTSY 			int
IDENT 			b
RPARSY 			)
LBRACE 			{
WHILESY 			while
LPARSY 			(
IDENT 			b
BIGGERSY 			>
SIGNEDINT 			0
RPARSY 			)
LBRACE 			{
IDENT 			b
ASSIGHSY 			=
IDENT 			b
MINUSSY 			-
UNSIGHEDINT 			1
SEMISY 			;
PRINTFSY 			printf
LPARSY 			(
IDENT 			a
RPARSY 			)
SEMISY 			;
RBRACE 			}
RBRACE 			}
COMMENT 			COMMENT
CHARSY 			char
IDENT 			_echo_4
LPARSY 			(
CHARSY 			char
IDENT 			a
RPARSY 			)
LBRACE 			{
RETURNSY 			return
IDENT 			a
SEMISY 			;
RBRACE 			}
COMMENT 			COMMENT
VOIDSY 			void
IDENT 			test_global
LPARSY 			(
RPARSY 			)
LBRACE 			{
CONSTSY 			const
INTSY 			int
IDENT 			n
ASSIGHSY 			=
UNSIGHEDINT 			10
SEMISY 			;
INTSY 			int
IDENT 			i
SEMISY 			;
IDENT 			i
ASSIGHSY 			=
SIGNEDINT 			0
SEMISY 			;
PRINTFSY 			printf
LPARSY 			(
IDENT 			_var_1
PLUSSY 			+
IDENT 			_var_2
PLUSSY 			+
IDENT 			_var_4
RPARSY 			)
SEMISY 			;
WHILESY 			while
LPARSY 			(
IDENT 			i
LESSSY 			<
IDENT 			n
RPARSY 			)
LBRACE 			{
PRINTFSY 			printf
LPARSY 			(
IDENT 			_int_array
LBRAKET 			[
IDENT 			i
RBRAKET 			]
RPARSY 			)
SEMISY 			;
IDENT 			i
ASSIGHSY 			=
IDENT 			i
PLUSSY 			+
UNSIGHEDINT 			1
SEMISY 			;
RBRACE 			}
RBRACE 			}
VOIDSY 			void
MAINSY 			main
LPARSY 			(
RPARSY 			)
LBRACE 			{
CONSTSY 			const
INTSY 			int
IDENT 			_const_1
ASSIGHSY 			=
UNSIGHEDINT 			101
SEMISY 			;
INTSY 			int
IDENT 			_varm_1
COMMASY 			,
IDENT 			_
SEMISY 			;
COMMENT 			COMMENT
IFSY 			if
LPARSY 			(
IDENT 			_return_0
LPARSY 			(
RPARSY 			)
EQUSY 			==
SIGNEDINT 			0
RPARSY 			)
LBRACE 			{
IDENT 			_print_na
LPARSY 			(
IDENT 			_const_c_1
COMMASY 			,
IDENT 			_const_4
RPARSY 			)
SEMISY 			;
RBRACE 			}
IFSY 			if
LPARSY 			(
IDENT 			_return_0
LPARSY 			(
RPARSY 			)
NOTEQU 			!=
SIGNEDINT 			0
RPARSY 			)
IDENT 			_print_na
LPARSY 			(
IDENT 			_const_c_2
COMMASY 			,
IDENT 			_const_4
RPARSY 			)
SEMISY 			;
ELSESY 			else
IDENT 			_varm_1
ASSIGHSY 			=
IDENT 			_return_0
LPARSY 			(
RPARSY 			)
SEMISY 			;
COMMENT 			COMMENT
WHILESY 			while
LPARSY 			(
IDENT 			_varm_1
LESSSY 			<
UNSIGHEDINT 			10
RPARSY 			)
LBRACE 			{
IDENT 			_varm_1
ASSIGHSY 			=
IDENT 			_varm_1
PLUSSY 			+
UNSIGHEDINT 			1
SEMISY 			;
IDENT 			_int_array
LBRAKET 			[
IDENT 			_varm_1
MINUSSY 			-
UNSIGHEDINT 			1
RBRAKET 			]
ASSIGHSY 			=
IDENT 			_varm_1
MINUSSY 			-
UNSIGHEDINT 			1
SEMISY 			;
IDENT 			_varm_1
ASSIGHSY 			=
IDENT 			_int_array
LBRAKET 			[
IDENT 			_varm_1
MINUSSY 			-
UNSIGHEDINT 			1
RBRAKET 			]
PLUSSY 			+
UNSIGHEDINT 			1
SEMISY 			;
IDENT 			_print_na
LPARSY 			(
IDENT 			_const_c_3
COMMASY 			,
IDENT 			_const_4
RPARSY 			)
SEMISY 			;
RBRACE 			}
WHILESY 			while
LPARSY 			(
IDENT 			_varm_1
BIGGERSY 			>
UNSIGHEDINT 			10
RPARSY 			)
LBRACE 			{
PRINTFSY 			printf
LPARSY 			(
_STRING 			should not happend!!
RPARSY 			)
SEMISY 			;
RBRACE 			}
COMMENT 			COMMENT
LBRACE 			{
IDENT 			_print_na
LPARSY 			(
IDENT 			_const_c_1
COMMASY 			,
IDENT 			_const_4
RPARSY 			)
SEMISY 			;
IDENT 			_varm_1
ASSIGHSY 			=
PLUSSY 			+
PLUSSY 			+
UNSIGHEDINT 			1
MINUSSY 			-
PLUSSY 			+
UNSIGHEDINT 			2
MULSY 			*
IDENT 			_const_1
MINUSSY 			-
LPARSY 			(
IDENT 			_echo_4
LPARSY 			(
IDENT 			_const_c_1
RPARSY 			)
PLUSSY 			+
UNSIGHEDINT 			1
RPARSY 			)
DIVSY 			/
UNSIGHEDINT 			4
MULSY 			*
UNSIGHEDINT 			2
PLUSSY 			+
_CHAR 			a
MINUSSY 			-
_CHAR 			s
MULSY 			*
IDENT 			_int_array
LBRAKET 			[
IDENT 			_varm_1
MINUSSY 			-
UNSIGHEDINT 			2
RBRAKET 			]
SEMISY 			;
COMMENT 			COMMENT
RBRACE 			}
PRINTFSY 			printf
LPARSY 			(
_STRING 			1:
COMMASY 			,
IDENT 			_int_array
LBRAKET 			[
UNSIGHEDINT 			1
RBRAKET 			]
RPARSY 			)
SEMISY 			;
COMMENT 			COMMENT
IDENT 			_var_4
ASSIGHSY 			=
IDENT 			_echo_4
LPARSY 			(
IDENT 			_const_c_1
RPARSY 			)
SEMISY 			;
PRINTFSY 			printf
LPARSY 			(
_STRING 			43:
COMMASY 			,
IDENT 			_var_4
RPARSY 			)
SEMISY 			;
IDENT 			_int_array
LBRAKET 			[
SIGNEDINT 			0
RBRAKET 			]
ASSIGHSY 			=
IDENT 			_return_ab
LPARSY 			(
IDENT 			_var_4
COMMASY 			,
IDENT 			_int_array
LBRAKET 			[
UNSIGHEDINT 			3
RBRAKET 			]
RPARSY 			)
SEMISY 			;
COMMENT 			COMMENT
COMMENT 			COMMENT
SWITCHSY 			switch
LPARSY 			(
PLUSSY 			+
PLUSSY 			+
UNSIGHEDINT 			1
MINUSSY 			-
PLUSSY 			+
UNSIGHEDINT 			2
MULSY 			*
IDENT 			_const_1
MINUSSY 			-
LPARSY 			(
IDENT 			_echo_4
LPARSY 			(
IDENT 			_const_c_1
RPARSY 			)
PLUSSY 			+
UNSIGHEDINT 			1
RPARSY 			)
DIVSY 			/
UNSIGHEDINT 			4
MULSY 			*
UNSIGHEDINT 			2
PLUSSY 			+
_CHAR 			a
MINUSSY 			-
_CHAR 			s
MULSY 			*
IDENT 			_int_array
LBRAKET 			[
UNSIGHEDINT 			10
MINUSSY 			-
UNSIGHEDINT 			2
RBRAKET 			]
RPARSY 			)
LBRACE 			{
CASESY 			case
UNSIGHEDINT 			1
COLONSY 			:
PRINTFSY 			printf
LPARSY 			(
_STRING 			Wrong!
RPARSY 			)
SEMISY 			;
CASESY 			case
MINUSSY 			-
UNSIGHEDINT 			1046
COLONSY 			:
LBRACE 			{
IDENT 			_echo_4
LPARSY 			(
IDENT 			_const_c_2
RPARSY 			)
SEMISY 			;
PRINTFSY 			printf
LPARSY 			(
_STRING 			Right!
COMMASY 			,
IDENT 			_int_array
LBRAKET 			[
UNSIGHEDINT 			2
RBRAKET 			]
RPARSY 			)
SEMISY 			;
RBRACE 			}
CASESY 			case
UNSIGHEDINT 			2
COLONSY 			:
PRINTFSY 			printf
LPARSY 			(
_STRING 			Wrong
RPARSY 			)
SEMISY 			;
DEFAULTSY 			default
COLONSY 			:
LBRACE 			{
PRINTFSY 			printf
LPARSY 			(
_STRING 			Wrong
RPARSY 			)
SEMISY 			;
RBRACE 			}
RBRACE 			}
COMMENT 			COMMENT
PRINTFSY 			printf
LPARSY 			(
_STRING 			Is a:
COMMASY 			,
IDENT 			_const_c_3
RPARSY 			)
SEMISY 			;
COMMENT 			COMMENT
SCANFSY 			scanf
LPARSY 			(
IDENT 			_var_1
COMMASY 			,
IDENT 			_var_2
COMMASY 			,
IDENT 			_
RPARSY 			)
SEMISY 			;
PRINTFSY 			printf
LPARSY 			(
IDENT 			_var_1
COMMASY 			,
IDENT 			_var_2
COMMASY 			,
IDENT 			_
RPARSY 			)
SEMISY 			;
COMMENT 			COMMENT
IDENT 			test_global
LPARSY 			(
RPARSY 			)
SEMISY 			;
COMMENT 			COMMENT
SCANFSY 			scanf
LPARSY 			(
IDENT 			_var_1
COMMASY 			,
IDENT 			_var_2
RPARSY 			)
SEMISY 			;
IFSY 			if
LPARSY 			(
IDENT 			_var_1
LESS_EQU 			<=
IDENT 			_var_2
RPARSY 			)
LBRACE 			{
PRINTFSY 			printf
LPARSY 			(
_STRING 			_var_1 <= _var_2
RPARSY 			)
SEMISY 			;
RBRACE 			}
IFSY 			if
LPARSY 			(
IDENT 			_var_1
BIG_EQU 			>=
IDENT 			_var_2
RPARSY 			)
LBRACE 			{
PRINTFSY 			printf
LPARSY 			(
_STRING 			_var_1 >= _var_2
RPARSY 			)
SEMISY 			;
RBRACE 			}
RBRACE 			}
